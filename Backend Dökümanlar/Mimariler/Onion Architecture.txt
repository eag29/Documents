Onion Architecture:
******************
KatmanlÄ± mimarinin bir evrimi olarak dÃ¼ÅŸÃ¼nÃ¼lebilir.
Ã–zellikle baÄŸÄ±mlÄ±lÄ±klarÄ±n doÄŸru yÃ¶netilmesini, baÄŸÄ±msÄ±z iÅŸ mantÄ±ÄŸÄ±nÄ±n oluÅŸturulmasÄ±nÄ± 
test edilebilirliÄŸi Ã¶n plana Ã§Ä±karÄ±r.
/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*
Onion Architecture KatmanlarÄ±
Onion Architecture, iÃ§ten dÄ±ÅŸa doÄŸru bÃ¼yÃ¼yen halkalar (onion - soÄŸan) gibi bir yapÄ±ya sahiptir.
Genellikle 4 ana katmandan oluÅŸur:

1. Domain Layer (Core) â†’ Ã‡ekirdek Katman
En iÃ§teki katmandÄ±r.
Tamamen baÄŸÄ±msÄ±zdÄ±r ve hiÃ§bir dÄ±ÅŸ baÄŸÄ±mlÄ±lÄ±ÄŸÄ± iÃ§ermez.
Temel iÅŸ kurallarÄ± (business rules) ve entityâ€™ler (domain entities) burada tanÄ±mlanÄ±r.
Service (Domain Service), Aggregates, Value Objects gibi modelleri barÄ±ndÄ±rÄ±r.

2. Application Layer â†’ Uygulama KatmanÄ±
Ä°ÅŸ mantÄ±ÄŸÄ±nÄ± yÃ¶netir ve dÄ±ÅŸ dÃ¼nyaya aÃ§Ä±lan hizmetleri saÄŸlar.
Use Caseâ€™ler (Application Services) burada bulunur.
Domain Layer ile dÄ±ÅŸ dÃ¼nyayÄ± baÄŸlayan ara katmandÄ±r.
Interfaces (Repository, Services) burada tanÄ±mlanÄ±r ama implementasyonlarÄ± burada olmaz.

3. Infrastructure Layer â†’ AltyapÄ± KatmanÄ±
VeritabanÄ± eriÅŸimi, Ã¼Ã§Ã¼ncÃ¼ parti kÃ¼tÃ¼phaneler, dosya sistemi, API Ã§aÄŸrÄ±larÄ± gibi dÄ±ÅŸ sistemlerle entegrasyonu saÄŸlar.
Application Layerâ€™daki interfaceâ€™leri uygular (Repository, Data Access gibi).
ORM araÃ§larÄ± (EF Core, Dapper vb.), Logging, Authentication, Email gÃ¶nderme gibi iÅŸlemler buradadÄ±r.

4. Presentation Layer â†’ Sunum KatmanÄ±
UI, API, Konsol UygulamasÄ±, Web Servisleri gibi dÄ±ÅŸ katmanlarÄ± iÃ§erir.
KullanÄ±cÄ±dan gelen istekleri alÄ±r, Application Layerâ€™a yÃ¶nlendirir ve sonuÃ§larÄ± dÃ¶ndÃ¼rÃ¼r.
MVC, Blazor, Angular, React gibi teknolojiler burada kullanÄ±lÄ±r.

Onion Architecture KullanmanÄ±n AvantajlarÄ±
âœ… BaÄŸÄ±msÄ±z Ä°ÅŸ MantÄ±ÄŸÄ±: Ä°ÅŸ mantÄ±ÄŸÄ±, herhangi bir UI veya veri kaynaÄŸÄ±ndan baÄŸÄ±msÄ±zdÄ±r.
âœ… BaÄŸÄ±mlÄ±lÄ±klar Kontrol AltÄ±nda: DÄ±ÅŸ baÄŸÄ±mlÄ±lÄ±klar iÃ§e doÄŸru akmaz.
âœ… Test Edilebilirlik: Ä°Ã§ katmanlar baÄŸÄ±msÄ±z olduÄŸu iÃ§in kolayca test edilebilir.
âœ… GeliÅŸtirilebilirlik ve Ã–lÃ§eklenebilirlik: BÃ¼yÃ¼k projelerde kolay yÃ¶netilebilir yapÄ± sunar.

Onion Architecture, baÄŸÄ±mlÄ±lÄ±klarÄ± merkezden dÄ±ÅŸa yÃ¶nlendirerek iÅŸ mantÄ±ÄŸÄ±nÄ± baÄŸÄ±msÄ±z kÄ±lan bir mimari modeldir. 
Ã–zellikle bÃ¼yÃ¼k ve karmaÅŸÄ±k projelerde test edilebilirliÄŸi artÄ±rÄ±r ve geliÅŸtirmeyi kolaylaÅŸtÄ±rÄ±r. 
Ancak, kÃ¼Ã§Ã¼k projeler iÃ§in fazla karmaÅŸÄ±k olabilir. 
.NET Core ile geliÅŸmiÅŸ uygulamalar geliÅŸtirmek isteyenler iÃ§in ideal bir mimaridir. ğŸš€